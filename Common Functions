#This section is about lists
#Lists are mutable
#Lists can use indexing, slicing, length, and concationation
#indexing [] is when your code grabs a single character from a list of string
#Length function displays the length of data types - in our case lists
#Concatination is just adding something to a data type - in our case lists
my_list = [1,2,3] #Here we defined what our list is - take note of the square brackets used
my_list[0] #This is an example of indexing - This will display the first item in the my_list - in this case it will be 1 - now if we did [-1] that would display the last item in our list
my_list[0] = 'one' #This will change 1 to one 
my_list.append('4') #This will add 4 at the end of our list
my_list.pop() #This will 'pop' off the last item on our list
my_list.pop(0) #This will 'pop' off the first item on our list - if you were to put 1 instead it would 'pop' off the second item in our list
#Lets redefine our list
my_list = ['a','c','d','b']
sorted(my_list) #This will sort our list in alphabetical order and display a b c d
my_list.reverse() #This will reverse the order of the items in our list
len(my_list) #This will display 3 - there are 3 items in my_list
my_list[0:] #This is called slicing - this will display c, d, and b 
my_list[:2] #This will display a, c, and d
my_list[0:2] #This will display a, c, and d - This will start at the index postion of 0 and display the characters until the index position of 2
#Lets redfine our list again
my_list = ['a','b','c','d','e','f','g','h','i','j','k']
my_list[::2] #This is step size - this will display every two characters in this case it will be a, c, e, g, i, and k
my_list[2:7:2] #This will show c, e, and g - This starts at the second index position the goes up to but does not include the seventh position with a step size of 2
my_list[::-1] #This will reverse the items in the list

## I will add more to this progress through the course and learn more
#Happy Coding!


